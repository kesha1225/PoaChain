from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

from .routers import index_router, mnemonic_router, wallet_router, sign_router


app = FastAPI()
app.include_router(index_router)
app.include_router(mnemonic_router)
app.include_router(wallet_router)
app.include_router(sign_router)
app.mount("/css", StaticFiles(directory="web/static/css/"), name="css")
app.mount("/html", StaticFiles(directory="web/static/html/"), name="html")
app.mount("/js", StaticFiles(directory="web/static/js/"), name="js")
app.mount("/images", StaticFiles(directory="web/static/images/"), name="images")


"""
Это все использовать в описании.

Есть список авторитетных нод. Они записаны в каждой ноде.
Когда юзер отправляет транзакцию то она высылается в ноду по загруженности или удаленности.
Распределением транзакций занимается балансировщик, он тупа перенаправляет запросы.
Также транзакцию можно послать в ноду напрямую.

При запуске ноды она идет во все остальные ноды и запрашивает у них данные блоков и транзакций 
и синхронизируется. При запуске ноды выбирается нода с самой длинной цепочкой блоков и каждая транза
проверяется на валидность, чтобы отсеять жуликов. Если найдена ошибка блок запоминается как плохой и ищется нода
дальше.

Ноды в порядке очереди генерируют блоки и высылают их на проверку другим нодам вместе с транзакциями.

Пока не пришел подтвержденный блок от предыдущей ноды в списке генерация блока не начинается.
 
Перед рассылкой блока нода отправляет всем уведомление мол скоро разошлю блок, и ждет ответа
от всех доступных, дальше рассылает блок всем. Нода становится готовой после того как она 
получила уведомление о предстоящей рассылке блока и ответила на него.
Нода проверяет каждую другую на готовность и если какая то не готова или недоступна, 
то от нее блок не ждется а ждется от предыдущей в списке итд.

(че делать с жуликами которые сказали что готовы а сами блок не генерируют все же встанет)
(видимо решать ручными проверками и исключениями из списка нод)

Перед отправкой блока все транзы перепровряются на баланс юзера, чтобы юзер не мог с двух нод отпраивть параллельно
Ноды принимают блок и проверяют там все транзы чтобы не было жульничества.
Если ноду все устраивает она добавляет блок себе.
Если есть ошибки то блок нода не добавляет.
И очередь двигается дальше.
Получается если нода сжульничала то нормальные ноды ее блок не примут, а плохие примут.
из за чего их блокчейны разойдутся (они не смогут принять в дальнейшем блоки друг друга) 
но в этом и смысл останется выбор, а в битке например
если 51% то все никуда не деться все примут блок.
Пока нода не готова она сама генерировать блоки не начинает.
Это нужно чтобы обе ноды подряд не начали генерить блок после получения его от предыдущей ноды.
При перезапуске ноды она пересинхронизируется.

В блок попадают неподтвержденные транзакции в конкретной ноде.

Также есть обычные ноды которые синхронизируются с нодами валидаторами и могут отправлять транзакции, отправляя
их в балансировщик или ноды валидаторы. Для децентрализации!
"""

# 1. todo: get_wallet_data поменять чтобы он ходил в выбранную ноду а не в базу
# todo: в вебе писать колво блоков у конкретной ноды при выборе. юзер может выбрать
# самую старую и надежную
# создание транзы в апи и в веб
# 2. обзорщик блоков, поиск транзакций и обзор чужих адресов, отображение
# моих транзакций
# todo: сделать недоступными к выбору неактивные ноды.
# 2. todo: првоерять что кука протухла и разлогинивать!
# 3. todo: автообновление валлета типа что поменялся баланс
# todo: проверить точно ли берется нода с самым последним блоком и синк идет с ней


# прочее:
# todo: ноды и веб в докер
# todo: поднять реально в вебе чтобы по куеру могли зайти
